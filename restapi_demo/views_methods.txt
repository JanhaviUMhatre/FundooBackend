def index(request):  # homepage
    return render(request, 'index.html', {})


def login_page(request):  # login page
    return render(request, 'login.html')


def logout(request):
    auth.logout(request)
    return render(request, 'login.html')


'''
sign up method which takes 4 arguments ie username, email, password and confirm password.
and generate registration link and send it to corresponding email id.
if valid then go to login page
else show error message
'''


@require_POST
def Signup(request):
    # if request.method == 'POST':
    data = json.loads(request.body)
    username = data.get('username')
    email = data.get('email')
    password1 = data.get('password1')
    password2 = data.get('password2')

    print(username, " ", email, " ", password1, " ", password2)

    if username and email and password1 and password2 is not "":
        print("if block")
        if User.objects.filter(username=username).exists():  # for user and email also we can try this
            return JsonResponse({"msg": "username already present"})

        if not re.match(r'^[a-zA-Z0-9.+_-]+@[a-zA-Z0-9._-]+\.[a-zA-Z]+$', email):
            return JsonResponse({"msg": "Not proper email"})

        if password1 == password2:
            User.objects.create_user(username=username, email=email, password=password1, is_active=True)
            user = User.objects.get(username=username)

            message = render_to_string('acc_active_email.html', {
                'user': user,
                # 'domain': 'http://127.0.0.1:8000',
                'domain': 'localhost:4200/login',
                'uid': urlsafe_base64_encode(force_bytes(user.pk)).decode(),
                'token': account_activation_token.make_token(user),
            })
            mail_subject = 'Activate your account...'
            to_email = email
            send_email = EmailMessage(mail_subject, message, to=[to_email])
            send_email.send()

            payload = {'username': username, 'password': password1}
            # token = jwt.encode(payload, "secret_key", algorithm='HS256').decode('utf-8')
            jwt_token = {
                'token': jwt.encode(payload, "secret_key", algorithm='HS256').decode('utf-8')
            }
            token = jwt_token.values()
            print(token)
        else:
            return JsonResponse({"msg": "not matching password"})
        json_data = {
            "username": username,
            "email": email,
            "msg": "please got to your mail and activate your account",
            "token": jwt_token
        }

        return JsonResponse(json_data)

    else:
        print("else block")
        return JsonResponse({"msg": "something is empty"})
    # else:
    #
    #     # form = SignupForm()
    #     return JsonResponse({"msg": "reg failed"})


'''
this is login method which is takes 2 arguments ie. username and password
if details are correct go to dashboard 
else show error message
'''


@require_POST
def login_user(request):
    res = {
        "success": False,
        "data": {},
        "message": ""
    }
    try:
        data = json.loads(request.body)
        print('data from Angular', data)
        username = data.get('username')
        password = data.get('password')
        if username is None:
            raise Exception('Username not passed')
        if password is None:
            raise Exception('Password not passed')
        print(username)
        print(password)
        user = authenticate(username=username, password=password)
        if user:
            print("if part")
            if user.is_active:
                login(request, user)
                payload = {'username': username, 'password': password}
                # token = jwt.encode(payload, "secret_key", algorithm='HS256').decode('utf-8')
                jwt_token = {
                    'token': jwt.encode(payload, "secret_key", algorithm='HS256').decode('utf-8')
                }
                print(jwt_token)
                # res = {
                #     "success": True,
                #     "message": "successful login",
                #     "data": jwt_token
                # }
                res['data'] = jwt_token
                res["message"] = "login successful"
                dump = json.dumps(res)
                return HttpResponse(dump, content_type="application/json")
            else:
                res['message'] = 'Inactive account'
                return JsonResponse(res)
        else:
            print("else part")
            res["message"] = "Username or password is not correct"
            return JsonResponse(res)
    except Exception as e:
        print(e)
        return JsonResponse(res)
    # else:
    #     res = {
    #         "success": False,
    #         "message": "UNSUCCESSFUL login"
    #     }
    #     return JsonResponse(res)




urls.py

path('', views.Signup, name='rest_register'),

url(r'^log_me/$', views.login_page, name='log_me'),

# path('login_user/', views.login_user, name='login_user'),
path('login_user/', views.login_user, name='login_user'),
path('logout/', views.logout, name="logout"),

